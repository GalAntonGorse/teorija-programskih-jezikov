module imp where


-- Logiƒçne vrednosti

data Bool : Set where
    true : Bool
    false : Bool

if_then_else_ : {A : Set} ‚Üí Bool ‚Üí A ‚Üí A ‚Üí A
if true then x else y = x
if false then x else y = y

¬¨ : Bool ‚Üí Bool
¬¨ true = false
¬¨ false = true

_‚àß_ : Bool ‚Üí Bool ‚Üí Bool
true ‚àß true = true
true ‚àß false = false
false ‚àß true = false
false ‚àß false = false

_‚à®_ : Bool ‚Üí Bool ‚Üí Bool
true ‚à® true = true
true ‚à® false = true
false ‚à® true = true
false ‚à® false = false

-- Naravna ≈°tevila

data Nat : Set where
    zero : Nat
    suc : Nat ‚Üí Nat 

-- Namesto suc (suc zero) lahko napi≈°emo kar 2
{-# BUILTIN NATURAL Nat #-}

plus : Nat ‚Üí Nat ‚Üí Nat
plus zero n = n
plus (suc m) n = suc (plus m n)

times : Nat ‚Üí Nat ‚Üí Nat
times zero n = zero
times (suc m) n = plus (times m n) n

_==_ : Nat ‚Üí Nat ‚Üí Bool
zero == zero = true
(suc n) ==  (suc m) = (n == m)
_ == _ = false

_lessthan_ : Nat ‚Üí Nat ‚Üí Bool
zero lessthan (suc n) = true
(suc n) lessthan (suc m) = n lessthan m
_ lessthan _ = false

pow : Nat ‚Üí Nat ‚Üí Nat
pow n zero = 1
pow n (suc m) = times n (pow n m)

-- Seznami

data List (A : Set) : Set where
    [] :  List A
    _::_ : A ‚Üí List A ‚Üí List A

_++_ : {A : Set} ‚Üí List A ‚Üí A ‚Üí List A
[] ++ a = a :: []
(a :: tail) ++ b = a :: (tail ++ b)


-- Konƒçne mno≈æice

data Fin : Nat ‚Üí Set where
    zero : {n : Nat} ‚Üí Fin (suc n)
    suc : {n : Nat} ‚Üí Fin n ‚Üí Fin (suc n)

infixl 25 _/_

_/_ : (m n : Nat) ‚Üí Fin (suc (plus m n))
zero / n = zero
suc m / n = suc (m / n)


-- Vektorji

data Vec (A : Set) : Nat ‚Üí Set where
    [] : Vec A zero
    _::_ : {n : Nat} ‚Üí A ‚Üí Vec A n ‚Üí Vec A (suc n)

_[_] : {A : Set} {n : Nat} ‚Üí Vec A n ‚Üí Fin n ‚Üí A
[] [ () ]
(x :: v) [ zero ] = x
(x :: v) [ suc ind ] = v [ ind ]

_[_]‚Üê_ : {A : Set} {n : Nat} ‚Üí Vec A n ‚Üí Fin n ‚Üí A ‚Üí Vec A n
_[_]‚Üê_ [] ()
_[_]‚Üê_ (x :: xs) zero v = v :: xs
_[_]‚Üê_ (x :: xs) (suc i) v = x :: (xs [ i ]‚Üê v)


-- Sintaksa jezika

infixr 3 _Ôºõ_ 
infix 4 _:=_
infix 5 IF_THEN_ELSE_END
infix 6 WHILE_DO_DONE
infix 6 SKIP
infix 7 _OR_
infix 8 _AND_
infix 9 NOT_
infix 10 _‚â°_
infix 10 _>_
infix 10 _<_

infixl 11 _+_
infixl 12 _*_
infixr 13 _**_
infix 14 !_
infix 15 `_

-- Artimetiƒçne in logiƒçne izraze ter ukaze parametriziramo z naravnim ≈°tevilom `n`,
-- ki pove, da izraz uporablja spremenljivke indeksirane med `0` in `n - 1`.

data Exp (n : Nat) : Set where
    `_ : Nat ‚Üí Exp n
    !_ : Fin n ‚Üí Exp n -- Spremenljivke nazivamo z naravnimi ≈°tevili manj≈°imi od `n`
    _+_ : Exp n ‚Üí Exp n ‚Üí Exp n
    _*_ : Exp n ‚Üí Exp n ‚Üí Exp n
    _**_ : Exp n ‚Üí Exp n ‚Üí Exp n

data BExp (n : Nat) : Set where
    ùîπ : Bool ‚Üí BExp n
    _‚â°_ : Exp n ‚Üí Exp n ‚Üí BExp n
    _<_ : Exp n ‚Üí Exp n ‚Üí BExp n
    _>_ : Exp n ‚Üí Exp n ‚Üí BExp n
    _AND_ : BExp n ‚Üí BExp n ‚Üí BExp n
    NOT_ : BExp n ‚Üí BExp n
    _OR_ : BExp n ‚Üí BExp n ‚Üí BExp n

data Cmd : (n : Nat) ‚Üí Set where
    IF_THEN_ELSE_END : {n : Nat} ‚Üí BExp n ‚Üí Cmd n ‚Üí Cmd n ‚Üí Cmd n
    WHILE_DO_DONE : {n : Nat} ‚Üí BExp n ‚Üí Cmd n ‚Üí Cmd n
    _Ôºõ_ : {n : Nat} ‚Üí Cmd n ‚Üí Cmd n ‚Üí Cmd n
    _:=_ : {n : Nat} ‚Üí (Fin n) ‚Üí Exp n ‚Üí Cmd n
    SKIP : {n : Nat} ‚Üí Cmd n
    FOR_:=_TO_DO_DONE : {n : Nat} ‚Üí Fin n ‚Üí Exp n ‚Üí Exp n ‚Üí Cmd n ‚Üí Cmd n
    PRINT_ : {n : Nat} ‚Üí Exp n ‚Üí Cmd n

-- Primer aritmetiƒçnega izraza, ki se≈°teje vrednosti spremenljivk na mestu 1 in 0 v stanju s tremi spremenljivkami. 
primer : Exp 3
primer = ! 1 / 1 + ! 0 / 2 -- Da lahko uporabimo vrednost na mestu 0 in 1 v izrazu velikosti do 3.

-- Program, ki se≈°teje prvih n naravnih ≈°tevil
vsota : Nat ‚Üí Cmd 3
vsota n = 
    0 / 2 := ` n Ôºõ -- Indeksiramo prvo spremenljivo, in tip vseh mo≈ænih spremenljivk poveƒçamo za 2, saj bomo v celotnem programo potrebovali tri spremenljivke
    1 / 1 := ` 0 Ôºõ
    2 / 0 :=  ! (0 / 2) Ôºõ
    WHILE ! (1 / 1) < ! (0 / 2) DO
        2 / 0 := ! 2 / 0 + ! 1 / 1 Ôºõ
        1 / 1 := ! 1 / 1 + ` 1
    DONE

-- Program, ki se≈°teje prvih n naravnih ≈°tevil s pomoƒçjo for zanke

sestevek : Nat ‚Üí Cmd 3
sestevek n = 
    0 / 2 := ` n Ôºõ -- Indeksiramo prvo spremenljivo, in tip vseh mo≈ænih spremenljivk poveƒçamo za 2, saj bomo v celotnem programo potrebovali tri spremenljivke
    1 / 1 := ` 0 Ôºõ
    2 / 0 :=  ! (0 / 2) Ôºõ
    FOR (1 / 1) := (` 1) TO ! (0 / 2) DO
        2 / 0 := ! 2 / 0 + ! 1 / 1 Ôºõ
        1 / 1 := ! 1 / 1 + ` 1
    DONE



-- Stanje

State : Nat ‚Üí Set
State n = Vec Nat n

--Result : Nat ‚Üí Set
--Result n = State n

-- ƒåe ≈æelite, lahko za nadgradnjo rezultatov uporabite spodnje tipe

record Pair (A B : Set) : Set where
     constructor _,_
     field
         fst : A
         snd : B

--Result : Nat ‚Üí Set
--Result n = Pair (State n) (List Nat)

data Maybe (A : Set) : Set where
     nothing : Maybe A
     just : A ‚Üí Maybe A

Result : Nat ‚Üí Set
Result n = Pair (Maybe (State n)) (List Nat)

evalExp : {n : Nat} ‚Üí State n ‚Üí Exp n ‚Üí Nat
evalExp st (` x) = x
evalExp st (! i) = st [ i ]
evalExp st (exp‚ÇÅ + exp‚ÇÇ) = plus (evalExp st exp‚ÇÅ) (evalExp st exp‚ÇÇ)
evalExp st (exp‚ÇÅ * exp‚ÇÇ) = times (evalExp st exp‚ÇÅ) (evalExp st exp‚ÇÇ)
evalExp st (exp‚ÇÅ ** exp‚ÇÇ) = pow (evalExp st exp‚ÇÅ) (evalExp st exp‚ÇÇ)

evalBExp : {n : Nat} ‚Üí State n ‚Üí BExp n ‚Üí Bool
evalBExp st (ùîπ bexp) = bexp
evalBExp st (exp‚ÇÅ ‚â° exp‚ÇÇ) = (evalExp st exp‚ÇÅ) == (evalExp st exp‚ÇÇ)
evalBExp st (exp‚ÇÅ < exp‚ÇÇ) = (evalExp st exp‚ÇÅ) lessthan (evalExp st exp‚ÇÇ)
evalBExp st (exp‚ÇÅ > exp‚ÇÇ) = (evalExp st exp‚ÇÇ) lessthan (evalExp st exp‚ÇÅ)
evalBExp st (bexp‚ÇÅ AND bexp‚ÇÇ) = (evalBExp st bexp‚ÇÅ) ‚àß (evalBExp st bexp‚ÇÇ)
evalBExp st (NOT bexp) = ¬¨ (evalBExp st bexp)
evalBExp st (bexp‚ÇÅ OR bexp‚ÇÇ) = (evalBExp st bexp‚ÇÅ) ‚à® (evalBExp st bexp‚ÇÇ)

evalCmd : {n : Nat} ‚Üí Nat ‚Üí Result n ‚Üí Cmd n ‚Üí Result n
evalCmd n (just st , lst) IF bexp THEN cmd‚ÇÅ ELSE cmd‚ÇÇ END =
    if evalBExp (st) bexp then
        evalCmd n (just st , lst) cmd‚ÇÅ
    else
        evalCmd n (just st , lst) cmd‚ÇÇ
evalCmd (suc n) (just st , lst) WHILE bexp DO cmd DONE =
    if evalBExp st bexp then
        evalCmd n (evalCmd n (just st , lst) cmd) (WHILE bexp DO cmd DONE)
    else
        (just st , lst) 
evalCmd n (just st , lst) (cmd‚ÇÅ Ôºõ cmd‚ÇÇ) = evalCmd n (evalCmd n (just st , lst) cmd‚ÇÅ) cmd‚ÇÇ
evalCmd _ (just st , lst) (‚Ñì := exp) = (just (st [ ‚Ñì ]‚Üê (evalExp st exp)), lst) 
evalCmd _ (just st , lst) SKIP = (just st , lst)
evalCmd zero (just st , lst) (WHILE bexp DO cmd DONE) = (nothing , lst)
evalCmd (suc n) (just st , lst) FOR ‚Ñì := n‚ÇÅ TO n‚ÇÇ DO cmd DONE =
    if evalBExp st (n‚ÇÅ < n‚ÇÇ) then
        evalCmd n (evalCmd n (just st , lst) cmd) (FOR ‚Ñì := n‚ÇÅ + ` 1 TO n‚ÇÇ DO cmd DONE)
    else
        (just st , lst)
evalCmd zero (just st , lst) FOR ‚Ñì := n‚ÇÅ TO n‚ÇÇ DO cmd DONE =
    (nothing , lst)
evalCmd n (just st , lst) (PRINT exp) = (just st , (lst ++ (evalExp st exp)))
evalCmd n (nothing , lst) cmd = (nothing , lst)

-- Pozor: tip funkcije ima smisel zgolj za osnovni tip rezultata
--vsotaPrvihN : Nat ‚Üí Nat
--vsotaPrvihN n = (evalCmd 125 ( 0 :: (0 :: (0 :: []))) (vsota n)) [ 2 / 0 ]
